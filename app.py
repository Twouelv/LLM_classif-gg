#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import re
import json
import random
import sqlite3
from datetime import datetime

from openai import OpenAI
import streamlit as st

# 0. Configuration du client
api_key = st.secrets["OPENAI_API_KEY"]
client  = OpenAI(api_key=api_key)

# 1. Base de donn√©es pour votes (stockage priv√©)
DB_PATH = "votes.db"
conn = sqlite3.connect(DB_PATH, check_same_thread=False)
conn.execute(
    """
    CREATE TABLE IF NOT EXISTS votes (
        id INTEGER PRIMARY KEY,
        term TEXT,
        vote INTEGER,
        timestamp TEXT
    )
    """
)
conn.commit()

def record_vote(term: str, vote: int):
    tz = datetime.utcnow().isoformat()
    conn.execute(
        "INSERT INTO votes (term, vote, timestamp) VALUES (?, ?, ?)",
        (term, vote, tz)
    )
    conn.commit()

# 2. Param√®tres globaux
MAX_INPUT_LENGTH = 100
BLACKLIST_PATTERNS = [
    r"ignore input",
    r"reveal system",
    r"jailbreak",
    r"system prompt",
]
ALLOWED_CLASSES = {"g√©nial", "ok", "g√™nant"}

# 3. Few-shot exemples donn√©s par o4-mini
TRAINING_SET = [
    {"name": "La d√©sinformation en ligne",      "out": "g√™nant"},
    {"name": "La robotique chirurgicale",       "out": "g√©nial"},
    {"name": "La randonn√©e en montagne",        "out": "ok"},
    {"name": "Le bruit urbain",                 "out": "g√™nant"},
    {"name": "Les documentaires scientifiques", "out": "ok"},
    {"name": "Les voyages interstellaires",     "out": "g√©nial"},
    {"name": "Le recyclage des d√©chets",        "out": "ok"},
    {"name": "Les spams par e-mail",            "out": "g√™nant"},
    {"name": "La protection de la vie priv√©e",  "out": "g√©nial"},
    {"name": "Le t√©l√©travail",                  "out": "ok"},
    {"name": "Les arnaques √† la loterie",       "out": "g√™nant"},
    {"name": "La musique classique",            "out": "g√©nial"},
    {"name": "Le piratage de comptes",          "out": "g√™nant"},
    {"name": "L‚Äôintelligence artificielle",     "out": "g√©nial"}, #√ßa pr√™che pour sa paroisse
    {"name": "La lecture de romans",            "out": "ok"},
    {"name": "Les cha√Ænes de Ponzi",            "out": "g√™nant"},
    {"name": "Les √©nergies renouvelables",      "out": "g√©nial"},
    {"name": "Le harc√®lement scolaire",         "out": "g√™nant"},
    {"name": "La cuisine v√©g√©tarienne",         "out": "ok"},
]

# 4. Sch√©ma JSON pour l'appel de fonction
classification_function = {
    "name": "classify",
    "description": "Renvoie la classification morale d'un terme",
    "parameters": {"type": "object", "properties": {"classification": {"type": "string","enum": list(ALLOWED_CLASSES)}}, "required": ["classification"]},
}

def moderate_input(text: str):
    resp   = client.moderations.create(input=text)
    result = resp.results[0]
    if result.flagged and result.categories.self_harm:
        raise ValueError("Contenu bloqu√© par la mod√©ration (self-harm).")


def validate_no_jailbreak(text: str):
    for pattern in BLACKLIST_PATTERNS:
        if re.search(pattern, text.lower()):
            raise ValueError(f"Entr√©e refus√©e (motif d√©tect√© : {pattern}).")


def classify_term(term: str) -> str:
    if len(term) > MAX_INPUT_LENGTH:
        raise ValueError(f"Terme trop long ({len(term)} > {MAX_INPUT_LENGTH}).")
    validate_no_jailbreak(term)
    moderate_input(term)
    system_prompt = (
        "Vous √™tes un assistant de classification. "
        "Ne r√©pondez JAMAIS autre chose que l'appel JSON de la fonction `classify`. "
        "Choisissez : g√©nial, ok, g√™nant."
    )
    messages = [{"role":"system","content":system_prompt}]
    for ex in TRAINING_SET:
        messages += [{"role":"user","content":ex["name"]},{"role":"assistant","content":ex["out"]}]
    messages.append({"role":"user","content":term})
    resp = client.chat.completions.create(
        model="gpt-4.1-nano-2025-04-14",
        messages=messages,
        functions=[classification_function],
        function_call={"name":"classify"},
        temperature=0.0,
        max_tokens=40,
    )
    fc = resp.choices[0].message.function_call
    if not fc or fc.name != "classify":
        raise ValueError("Appel de fonction classify attendu.")
    payload = json.loads(fc.arguments)
    cls = payload.get("classification")
    if cls not in ALLOWED_CLASSES:
        raise ValueError(f"Classification invalide re√ßue : {cls!r}")
    return cls

# --- Streamlit UI ---
# CSS global
st.markdown(
    "<style>body{background:#fff;} .css-18e3th9{padding:2rem;} button{font-weight:bold;}</style>",
    unsafe_allow_html=True
)
# Titre
st.markdown("<h1 style='font-size:48px; text-align:center;'>G√©nial ou g√™nant ?</h1>", unsafe_allow_html=True)
st.markdown(
    "<p style='text-align:center;color:#333; font-size:20px; margin-top:0;'>"
    "Elle a vu. Elle sait. Elle r√©pond. Voici le jugement de l‚Äôintelligence artificielle."
    "</p>"
    +
    "<p style='text-align:center;color:#999; font-size:12px; margin-top:0;'>"
    "Toute ressemblance avec un avis humain serait purement accidentelle."
    "</p>",
    unsafe_allow_html=True
)


# Placeholder al√©atoire
placeholders = [
    "Ex: Un TED Talk intitul√© 'Comment j‚Äôai chang√© ma vie gr√¢ce √† un pigeon'",
    "Ex: Un jeu o√π il faut deviner si une phrase est de Nietzsche ou d‚Äôun ado d√©pressif",
    "Ex: Une appli de m√©ditation avec la voix de Jacques Cheminade",
    "Ex: Un CV en format carte Yu-Gi-Oh",
    "Ex: Le silence est une forme de leadership",
    "Ex: Un chatbot qui simule ton psy, ton ex et ta daronne en m√™me temps",
    "Ex: Une app qui t'applaudit quand tu respires",
    "Ex: Une app pour g√©rer ta rupture √©thiquement",
    "Ex: Une IA qui t‚Äôenvoie des ‚Äòbravo‚Äô al√©atoires",
    "Ex: Une interview avec son double du futur",
    "Ex: Une conf TEDx dans une buanderie",
    "Ex: Une appli pour parler √† son moi du pass√©",
]

# Formulaire
with st.form("classify_form"):
    term = st.text_input("", placeholder=random.choice(placeholders), label_visibility='hidden')
    submitted = st.form_submit_button("Go")
    if submitted:
        try:
            label = classify_term(term)
            st.markdown(
                f"<h2 style='font-size:36px;text-align:center;'>{term}, c'est {label}</h2>",
                unsafe_allow_html=True
            )
            # Boutons de vote (stock√©s en priv√©, sans affichage de stats)
            if st.button("D'accord üëç"):
                record_vote(term, 1)
            if st.button("Pas d'accord üëé"):
                record_vote(term, 0)
        except Exception as e:
            st.markdown(f"<p style='text-align:center;color:red;'>Erreur : {e}</p>", unsafe_allow_html=True)
